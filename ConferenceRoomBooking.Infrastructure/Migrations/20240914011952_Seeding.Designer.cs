// <auto-generated />
using System;
using ConferenceRoomBooking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConferenceRoomBooking.Infrastructure.Migrations
{
    [DbContext(typeof(ConferenceRoomBookingDbContext))]
    [Migration("20240914011952_Seeding")]
    partial class Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingService", b =>
                {
                    b.Property<Guid>("BookingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("BookingService");
                });

            modelBuilder.Entity("ConferenceRoomBooking.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConferenceRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HourAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceRoomId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ConferenceRoomBooking.Domain.Entities.ConferenceRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("ConferenceRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("725dc2f9-b606-4d3e-a9cf-c3e5334cc901"),
                            Capacity = 50,
                            DateCreated = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3034),
                            LastModifiedDate = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3084),
                            Name = "A",
                            PricePerHour = 2000m
                        },
                        new
                        {
                            Id = new Guid("801dfec5-ec5c-43f2-bfca-a8202faf3fb9"),
                            Capacity = 100,
                            DateCreated = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3087),
                            LastModifiedDate = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3088),
                            Name = "B",
                            PricePerHour = 3500m
                        },
                        new
                        {
                            Id = new Guid("5bff1fc7-c763-4016-bf84-c37e8a3963f1"),
                            Capacity = 30,
                            DateCreated = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3089),
                            LastModifiedDate = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3090),
                            Name = "C",
                            PricePerHour = 1500m
                        });
                });

            modelBuilder.Entity("ConferenceRoomBooking.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ae51f1f-16db-463d-a3c6-9bdb186edfe7"),
                            DateCreated = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3830),
                            LastModifiedDate = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3839),
                            Name = "Проєктор",
                            Price = 500m
                        },
                        new
                        {
                            Id = new Guid("5f5c3b94-e920-43cd-8380-72a83924e177"),
                            DateCreated = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3841),
                            LastModifiedDate = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3842),
                            Name = "Wi-Fi",
                            Price = 300m
                        },
                        new
                        {
                            Id = new Guid("b2bda178-dc09-4c91-a18b-a9c704e11578"),
                            DateCreated = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3844),
                            LastModifiedDate = new DateTime(2024, 9, 14, 4, 19, 52, 374, DateTimeKind.Local).AddTicks(3845),
                            Name = "Звук",
                            Price = 700m
                        });
                });

            modelBuilder.Entity("ConferenceRoomService", b =>
                {
                    b.Property<Guid>("ConferenceRoomsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConferenceRoomsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ConferenceRoomService");
                });

            modelBuilder.Entity("BookingService", b =>
                {
                    b.HasOne("ConferenceRoomBooking.Domain.Entities.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferenceRoomBooking.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConferenceRoomBooking.Domain.Entities.Booking", b =>
                {
                    b.HasOne("ConferenceRoomBooking.Domain.Entities.ConferenceRoom", "ConferenceRoom")
                        .WithMany()
                        .HasForeignKey("ConferenceRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConferenceRoom");
                });

            modelBuilder.Entity("ConferenceRoomService", b =>
                {
                    b.HasOne("ConferenceRoomBooking.Domain.Entities.ConferenceRoom", null)
                        .WithMany()
                        .HasForeignKey("ConferenceRoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferenceRoomBooking.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
